class Feed { static forum; static schema = { "News": { "children": [ "Business", "Economic", "Environment", "Legal", "Politics", "Social Issues", "World News" ] }, "Business": { "parent": "News" }, "Economic": { "parent": "News" }, "Environment": { "parent": "News" }, "Legal": { "parent": "News" }, "Politics": { "parent": "News" }, "Social Issues": { "parent": "News" }, "World News": { "parent": "News" }, "Informative": { "children": [ "Education", "History", "Science", "Technology" ] }, "Education": { "parent": "Informative" }, "History": { "parent": "Informative" }, "Science": { "parent": "Informative" }, "Technology": { "parent": "Informative" }, "Entertainment": { "children": [ "Books", "Gaming", "Movies", "Music", "People", "Shows", "Sports", "Tabletop Games", "Virtual Reality" ] }, "Books": { "parent": "Entertainment" }, "Gaming": { "parent": "Entertainment" }, "Movies": { "parent": "Entertainment" }, "Music": { "parent": "Entertainment" }, "People": { "parent": "Entertainment" }, "Shows": { "parent": "Entertainment" }, "Sports": { "parent": "Entertainment" }, "Tabletop Games": { "parent": "Entertainment" }, "Virtual Reality": { "parent": "Entertainment" }, "Lifestyle": { "children": [ "Fashion", "Fitness", "Food", "Health", "Recipes", "Social Life", "Relationships", "Travel" ] }, "Fashion": { "parent": "Lifestyle" }, "Fitness": { "parent": "Lifestyle" }, "Food": { "parent": "Lifestyle" }, "Health": { "parent": "Lifestyle" }, "Recipes": { "parent": "Lifestyle" }, "Relationships": { "parent": "Lifestyle" }, "Social Life": { "parent": "Lifestyle" }, "Travel": { "parent": "Lifestyle" }, "Fun": { "children": [ "Ask", "Cosplay", "Cute", "Forum Games", "Funny" ] }, "Ask": { "parent": "Fun" }, "Cosplay": { "parent": "Fun" }, "Cute": { "parent": "Fun" }, "Forum Games": { "parent": "Fun" }, "Funny": { "parent": "Fun" }, "Creative": { "children": [ "Artwork", "Crafts", "Design", "Writing" ] }, "Artwork": { "parent": "Creative" }, "Crafts": { "parent": "Creative" }, "Design": { "parent": "Creative" }, "Writing": { "parent": "Creative" } }; static async fetchForumPost(forum, idHigh = -1, idLow = -1, scanType = 1) { let query; if (scanType === 1) { query = `?s=asc`; if (idHigh > -1) { query += `&h=${idHigh}`; } } else if (scanType === -1) { query = `?s=desc`; if (idLow > -1) { query += `&l=${idLow}`; } } else { query = idHigh > -1 ? `?h=${idHigh}` : ""; } console.log("--- Fetching Results ---"); console.log(`${API.url}/forum/${forum}${query}`); const response = await fetch(`${API.url}/forum/${forum}${query}`, { headers: { 'Content-Type': 'application/json', 'Credentials': 'include' } }); return await response.json(); } static getCachedPosts(forum) { const cachedPosts = window.localStorage.getItem(`posts:${forum}`); if (cachedPosts) { try { return JSON.parse(cachedPosts); } catch { return { }; } } return { }; } static cacheForumPosts(forum, postResponse) { const cachedPosts = Feed.getCachedPosts(forum); const rawPosts = postResponse ? postResponse : []; if (!Array.isArray(rawPosts)) { return { }; } for(let i = 0; i < rawPosts.length; i++){ const rawPost = rawPosts[i]; const id = Number(rawPost.id || 0); if (!id) { continue; } if (!cachedPosts[id]) { cachedPosts[id] = rawPost; window.localStorage.setItem(`posts:${forum}`, JSON.stringify(cachedPosts)); } } return cachedPosts; } static getIdRangeOfCachedPosts(cachedPosts) { let high = -1; let low = Infinity; for (const [key, post] of Object.entries(cachedPosts)){ if (!post.id) { continue; } const num = Number(key); if (num > high) { high = num; } if (num < low) { low = num; } } return { idHigh: high, idLow: low }; } static async load() { if (!Feed.forum) { return; } const forum = Feed.forum; let willFetch = false; let scanType = 0; if (Feed.schema && !Feed.schema[forum]) { console.error(`"${forum}" forum was not detected. Cannot load feed.`); return; } let cachedPosts = Feed.getCachedPosts(forum); const lastPull = Number(window.localStorage.getItem(`lastPull:${forum}`)) || 0; const { idHigh , idLow } = Feed.getIdRangeOfCachedPosts(cachedPosts); if (idHigh === -1) { willFetch = true; } if (willFetch === false && Nav.loadDate - lastPull > 300) { willFetch = true; scanType = 1; if (lastPull < Nav.loadDate - 60 * 60 * 24) { scanType = 0; window.localStorage.removeItem(`posts:${forum}`); } } if (willFetch) { try { const postResponse = await Feed.fetchForumPost(forum, idHigh, idLow, scanType); cachedPosts = Feed.cacheForumPosts(forum, postResponse); window.localStorage.setItem(`lastPull:${forum}`, `${Nav.loadDate}`); } catch { console.error(`Error with response in forum: ${forum}`); } } for (const [_key, post] of Object.entries(cachedPosts)){ if (!post.id) { return; } const feedElement = buildPost(post); Webpage.addBlock(feedElement); } } static initialize() { if (Nav.urlSeg[0] === "forum" && Nav.urlSeg.length > 1) { Feed.forum = decodeURI(Nav.urlSeg[1]); } else { Feed.forum = ""; } if (!Feed.schema[Feed.forum]) { Feed.forum = ""; } Feed.load(); } } const elLogin = document.getElementById("loginSubmit"); if (elLogin) { elLogin.addEventListener("click", async ()=>{ if (!API.url) { console.error("Unable to post. `API.url` is not set."); return; } if (elLogin.value !== "Log In") { return; } const data = { "user": document.getElementById("user").value, "pass": document.getElementById("pass").value }; Alerts.error(!data.user, "Please provide a username.", true); Alerts.error(!data.pass, "Please provide a password."); if (Alerts.hasErrors()) { Alerts.displayAlerts(); return; } elLogin.value = "Logging In..."; const json = await API.callAPI("/user/login", data); Alerts.error(!json, "Error: Server response was invalid. May need to contact the webmaster.", true); if (Alerts.hasAlerts()) { Alerts.displayAlerts(); return; } console.log("Success. Redirect from here."); }); } const elSignUp = document.getElementById("signUpSubmit"); if (elSignUp) { elSignUp.addEventListener("click", async ()=>{ if (!API.url) { console.error("Unable to post. `API.url` is not set."); return; } if (elSignUp.value !== "Sign Up") { return; } const data = { "user": document.getElementById("user").value, "email": document.getElementById("email").value, "pass": document.getElementById("pass").value, "tos": document.getElementById("tos").checked ? true : false, "privacy": document.getElementById("privacy").checked ? true : false }; Alerts.error(!data.user, "Please provide a username.", true); Alerts.error(data.user.length < 6, "Username must be between 6 and 16 characters."); Alerts.error(!data.email || !data.email.match(/^\S+@\S+\.\S+$/), "Must provide a valid email."); Alerts.error(!data.pass || data.pass.length < 8, "Password must be at least eight characters."); Alerts.error(!data.tos, "Must agree to the Terms of Service."); Alerts.error(!data.privacy, "Must agree to the Privacy Policy."); if (Alerts.hasErrors()) { Alerts.displayAlerts(); return; } elSignUp.value = "Submitting..."; const json = await API.callAPI("/user/sign-up", data); Alerts.error(!json, "Error: Server response was invalid. May need to contact the webmaster.", true); if (Alerts.hasAlerts()) { Alerts.displayAlerts(); return; } console.log(json); }); } document.addEventListener("click", (e)=>{ if (!e.target) { return; } if (!(e.target instanceof Element)) { return; } const origin = e.target.closest("a"); if (!origin || !origin.href) { return; } e.preventDefault(); Nav.updateURL(true, origin.href, document.title); Nav.runPageUpdate(); }); window.addEventListener("popstate", (event)=>{ event.preventDefault(); Nav.updateURL(true, document.location.href, document.title, true); Nav.runPageUpdate(); }); class OpenGraphMetaData { url; title; image; video; content; comment; determiner; locale; site_name; type; mediaClass; constructor(){ this.url = ""; this.title = ""; this.image = new OpenGraphMetaVisual(); this.video = new OpenGraphMetaVisual(); this.content = ""; this.comment = ""; this.determiner = ""; this.locale = ""; this.site_name = ""; this.type = ""; this.mediaClass = ""; } async getImageSize(url) { const img = new Image(); img.src = url; await img.decode(); this.image.width = img.width; this.image.height = img.height; } } class OpenGraphMetaVisual { url; mimeType; width; height; alt; locked; constructor(){ this.url = ""; this.mimeType = ""; this.width = 0; this.height = 0; this.alt = ""; this.locked = false; } setUrl(url) { this.url = url; } setMimeType(mimeType) { this.mimeType = mimeType; } setWidth(width) { this.width = width; } setHeight(height) { this.height = height; } setAlt(alt) { this.alt = alt; } lock() { this.locked = true; } isSmall() { if (this.width && this.width < 300) { return true; } if (this.height && this.height < 200) { return true; } return false; } } class OpenGraph { static postData; static async fetchData(url) { const response = fetch(`${API.url}/data/html?url=${encodeURIComponent(url)}`, { headers: { 'Content-Type': 'application/json', 'Credentials': 'include' } }); const data = await (await response).json(); let pass = false; const metaData = new OpenGraphMetaData(); try { const dom = new DOMParser().parseFromString(data, "text/html"); await OpenGraph.parseDocument(dom, metaData); pass = true; } catch (error) { pass = false; console.error(error.message); } if (pass) { OpenGraph.postData = { url: metaData.url, title: metaData.title, content: metaData.content, origImg: metaData.image.url, w: metaData.image.width, h: metaData.image.height }; const feedElement = buildPost(OpenGraph.postData); Webpage.clearBlock("main-contain"); Webpage.addBlock(feedElement); } } static async parseDocument(doc, metaData) { let scanForType = ""; const metaElements = doc.getElementsByTagName("meta"); for(let i = 0; i < metaElements.length; i++){ const metaVals = metaElements[i]; const metaName = metaVals.getAttribute("property") ? metaVals.getAttribute("property") : metaVals.name; if (!metaName || !metaVals.content) { continue; } const metaContent = metaVals.content; const s = metaName.split(":"); const name = s[1]; const nameProp = s[2]; if (name == "url") { metaData.url = metaContent; scanForType = ""; } if (name == "title") { metaData.title = metaContent; scanForType = ""; } if (name == "description") { metaData.content = metaContent.substring(0, 256); scanForType = ""; } if (name == "determiner") { metaData.determiner = metaContent; scanForType = ""; } if (name == "locale") { metaData.locale = metaContent; scanForType = ""; } if (name == "site_name") { metaData.site_name = metaContent; scanForType = ""; } if ((name == "image" || name == "video") && !metaData[name].locked) { if (nameProp) { if (nameProp == "url") { metaData[name].setUrl(metaContent); } else if (nameProp == "secure_url" && !metaData[name].url) { metaData[name].setUrl(metaContent); } else if (nameProp == "type") { metaData[name].setMimeType(metaContent); } else if (nameProp == "width") { metaData[name].setWidth(Number(metaContent)); } else if (nameProp == "height") { metaData[name].setHeight(Number(metaContent)); } else if (nameProp == "alt") { metaData[name].setAlt(metaContent); } } else { if (scanForType == name) { metaData[name].lock(); } else { metaData[name].setUrl(metaContent); } } scanForType = name; } } if (metaData.image && metaData.image.url) { await metaData.getImageSize(metaData.image.url); } } } class PostPage { static clearForm() { const submitElement = document.getElementById("postSubmit"); const urlElement = document.getElementById("postUrl"); const forumElement = document.getElementById("postForum"); urlElement.value = ""; forumElement.value = ""; submitElement.value = "Submit Post"; Webpage.clearBlock("main-contain"); } static populateForumSelect() { const sel = document.getElementById("postForum"); for (const [key, fData] of Object.entries(Feed.schema)){ if (typeof fData.parent !== "undefined") { continue; } const option = document.createElement("option"); option.value = key; option.text = key; option.setAttribute("style", "font-weight: bold; font-size: 1.2em;"); sel.add(option); if (typeof fData.children === "undefined") { continue; } for(let i = 0; i < fData.children.length; i++){ const option1 = document.createElement("option"); option1.value = fData.children[i]; option1.text = ` - ${fData.children[i]}`; sel.add(option1); } } } static initialize() { PostPage.populateForumSelect(); const postUrl = document.getElementById("postUrl"); const postSubmit = document.getElementById("postSubmit"); postUrl.addEventListener("click", ()=>{ postUrl.value = ""; }); postUrl.addEventListener("paste", ()=>{ setTimeout(function() { const urlInput = document.getElementById("postUrl"); const urlInfo = new URL(urlInput.value); try { if (urlInfo.pathname !== "/") { OpenGraph.fetchData(urlInput.value); } } catch { console.error("Unable to make a URL.", urlInput.value); } }, 10); }); postSubmit.addEventListener("click", async ()=>{ if (!API.url) { console.error("Unable to post. `API.url` is not set."); return; } const submitElement = postSubmit; if (submitElement.value !== "Submit Post") { return; } const urlElement = document.getElementById("postUrl"); const forumElement = document.getElementById("postForum"); if (!urlElement.value) { alert("Must provide a URL."); return; } if (!forumElement.value) { alert("Must select a forum to post to."); return; } if (!OpenGraph.postData) { alert("Submission must contain a valid post."); return; } if (!OpenGraph.postData.title) { alert("Requires a title."); return; } if (!OpenGraph.postData.origImg) { alert("Requires a valid image."); return; } if (!OpenGraph.postData.w || !OpenGraph.postData.h) { alert("Error: The system failed to identify image width and height."); return; } if (!Feed.schema || !Feed.schema[forumElement.value]) { alert("Error: The forum selected is considered invalid."); return; } OpenGraph.postData.forum = forumElement.value; submitElement.value = "Submitting..."; const json = await API.callAPI("/post", OpenGraph.postData); Alerts.error(!json, "Error: Post submission response was empty or invalid.", true); if (Alerts.hasAlerts()) { Alerts.displayAlerts(); return; } PostPage.clearForm(); console.log(json); }); } } const OneDay = 3600 * 24; class Nav { static url; static urlPathname; static urlSeg; static innerLoad; static loadDate; static local; static cacheStatic; static cacheDynamic; static initialize() { Nav.local = location.hostname.indexOf("local") > -1 ? true : false; if (Nav.local) { Nav.setCache(20, 20); } else { Nav.setCache(); } Nav.updateURL(false); } static updateURL(innerLoad, newUrl = "", newTitle = "", movedBack = false) { if (newUrl && !movedBack) { history.pushState(null, newTitle, newUrl); } Nav.innerLoad = innerLoad; Nav.loadDate = Math.floor(Date.now() / 1000); Nav.url = location.href; Nav.urlPathname = location.pathname; Nav.urlSeg = location.pathname.split("/"); if (Nav.urlSeg.length > 0) { Nav.urlSeg.shift(); } } static runPageUpdate() { const base = Nav.urlSeg[0]; if (Nav.innerLoad) { Webpage.clearMainSection(); } if (base === "") { Feed.initialize(); } else if (base === "forum" && Nav.urlSeg[1]) { Feed.initialize(); } else if (Nav.innerLoad) { Nav.loadInnerHtml(); } } static async loadInnerHtml() { const lastInner = Number(localStorage.getItem(`lastCache:${Nav.urlPathname}`)) || 0; if (Nav.loadDate - lastInner > Nav.cacheStatic) { console.log(`Clearing stale data on ${Nav.urlPathname}`); localStorage.removeItem(`html:${Nav.urlPathname}`); localStorage.setItem(`lastCache:${Nav.urlPathname}`, Nav.loadDate.toString()); } else { const innerHtml = localStorage.getItem(`html:${Nav.urlPathname}`); if (innerHtml) { Webpage.setMainSection(innerHtml); return; } } const response = await Webpage.getInnerHTML(Nav.urlPathname); const contents = await response.text(); Webpage.setMainSection(contents); Nav.saveLocalHtml(); } static saveLocalHtml() { const contents = Webpage.extractMainSection(); localStorage.setItem(`html:${Nav.urlPathname}`, contents); } static setCache(sta = OneDay * 3, dyn = 60 * 5) { Nav.cacheStatic = sta; Nav.cacheDynamic = dyn; } } class Webpage { static url; static clearMainSection() { const mainSection = document.getElementById("main-section"); for(let i = mainSection.children.length - 1; i >= 0; i--){ const child = mainSection.children[i]; mainSection.removeChild(child); } } static setMainSection(innerHtml) { Webpage.clearMainSection(); const main = document.getElementById("main-section"); main.innerHTML = innerHtml; } static addBlock(element) { const mainSection = document.getElementById("main-section"); if (mainSection !== null) { mainSection.appendChild(element); } } static clearBlock(blockId) { const mainSection = document.getElementById("main-section"); for(let i = mainSection.children.length - 1; i >= 0; i--){ const child = mainSection.children[i]; if (child.classList.contains(blockId)) { mainSection.removeChild(child); } } } static extractMainSection() { const mainSection = document.getElementById("main-section"); return mainSection.innerHTML; } static async getInnerHTML(path) { return await fetch(`${Webpage.url}/page${path}`, { headers: { 'Content-Type': 'text/html', 'Credentials': 'include' } }); } static initialize() { Alerts.purgeAlerts(); if (location.hostname.indexOf("local") > -1) { Webpage.url = `http://localhost`; } else { Webpage.url = `https://druidis.org`; } } } class API { static url; static initialize() { if (location.hostname.indexOf("local") > -1) { API.url = `http://localhost/api`; } else { API.url = `https://druidis.org/api`; } } static async callAPI(path, data = null) { const response = data === null ? await API.callGetAPI(path) : await API.callPostAPI(path, data); return await response.json(); } static async callPostAPI(path, data) { return await fetch(`${API.url}${path}`, { method: 'POST', headers: { 'Content-Type': 'application/json', 'Credentials': 'include' }, body: JSON.stringify(data) }); } static async callGetAPI(path) { return await fetch(`${API.url}${path}`, { headers: { 'Content-Type': 'application/json', 'Credentials': 'include' } }); } } class Alerts { static info; static errors; static hasAlerts() { return Alerts.errors.length > 0 || Alerts.info.length > 0 ? true : false; } static hasErrors() { return Alerts.errors.length === 0 ? false : true; } static purgeAlerts() { Alerts.errors = []; Alerts.info = []; } static error(assert, message, purge = false) { if (purge) { Alerts.purgeAlerts(); } if (assert) { Alerts.errors.push(message); } } static displayAlerts() { if (!Alerts.hasAlerts()) { return; } const info = document.getElementById("alertBox"); const isAlertBox = info ? true : false; if (isAlertBox) { info.innerHTML = ""; } for(let i = 0; i < Alerts.info.length; i++){ console.log(Alerts.info[i]); if (isAlertBox) { const alert = createElement("div", { "class": "alert alert-info" }); alert.innerHTML = Alerts.info[i]; info.appendChild(alert); } } for(let i1 = 0; i1 < Alerts.errors.length; i1++){ console.log(Alerts.errors[i1]); if (isAlertBox) { const alert = createElement("div", { "class": "alert alert-fail" }); alert.innerHTML = Alerts.errors[i1]; info.appendChild(alert); } } } } API.initialize(); Webpage.initialize(); Nav.initialize(); Nav.runPageUpdate(); function createElement(element, attribute = false, inner = null) { const el = document.createElement(element); if (typeof attribute === 'object') { for(const attKey in attribute){ el.setAttribute(attKey, attribute[attKey]); } } if (inner !== null) { for(let k = 0; k < inner.length; k++){ if (!inner[k]) { continue; } if (inner[k].tagName) { el.appendChild(inner[k]); } } } return el; } function buildPost(post) { const feedIconImg = createElement("amp-img", { "width": "48", "height": "48", "src": `/public/images/logo/logo-48.png` }); const feedIcon = createElement("div", { "class": "tray-icon" }, [ feedIconImg ]); const feedHeaderTitle = createElement("div", { "class": "h3" }); feedHeaderTitle.innerHTML = "Author Name or Title"; const feedHeaderSubNote = createElement("div", { "class": "note2" }); try { const urlInfo = new URL(post.url); feedHeaderSubNote.innerHTML = `Source: ${urlInfo.hostname}`; } catch { } const feedHeader = createElement("div", { "class": "tray-mid" }, [ feedHeaderTitle, feedHeaderSubNote ]); const feedMenuInner = createElement("div", { "class": "tray-menu-inner" }); feedMenuInner.innerHTML = "•••"; const feedMenu = createElement("div", { "class": "tray-menu" }, [ feedMenuInner ]); const feedTop = createElement("div", { "class": "tray" }, [ feedIcon, feedHeader, feedMenu ]); const feedWrapChildren = [ feedTop ]; if (post.img || post.origImg) { let feedImageImg; if (post.origImg) { feedImageImg = createElement("amp-img", { "layout": "responsive", "max-width": `${post.w}`, "width": `${post.w}`, "height": `${post.h}`, "src": post.origImg }); } else if (post.id) { const imgPage = Math.ceil(post.id / 1000); const imgPath = `${post.forum}/${imgPage}/${post.img}`; feedImageImg = createElement("amp-img", { "layout": "responsive", "max-width": `${post.w}`, "width": `${post.w}`, "height": `${post.h}`, "src": `https://us-east-1.linodeobjects.com/druidis-cdn/${imgPath}` }); } if (feedImageImg) { const feedImageInner = createElement("div", { "class": "feed-image-inner" }, [ feedImageImg ]); const feedImage = createElement("div", { "class": "feed-image" }, [ feedImageInner ]); const feedHov = createElement("a", { "class": "feed-hov", "href": post.url }, [ feedImage ]); feedWrapChildren.push(feedHov); } } const feedWrap = createElement("div", { "class": "half-wrap" }, feedWrapChildren); const extraTitle = createElement("h2"); extraTitle.innerHTML = post.title; const extraContent = createElement("p"); extraContent.innerHTML = post.content; const extraBody = createElement("div", { "class": "extra-body" }, [ extraTitle, extraContent ]); const extraWrapLink = createElement("a", { "class": "feed-hov", href: post.url }, [ extraBody ]); const linkList = createElement("div", { "class": "linkList" }); const sch = post.forum ? Feed.schema[post.forum] : null; if (sch && sch.parent && sch.parent !== Feed.forum) { const crumb = createElement("a", { "class": "link", "href": `/forum/${sch.parent}` }); crumb.innerHTML = sch.parent; linkList.appendChild(crumb); } if (post.forum && post.forum !== Feed.forum) { const crumb = createElement("a", { "class": "link", "href": `/forum/${post.forum}` }); crumb.innerHTML = post.forum; linkList.appendChild(crumb); } const extraFoot = createElement("div", { "class": "extra-foot" }, [ linkList ]); const extraWrap = createElement("div", { "class": "extra-wrap" }, [ extraWrapLink, extraFoot ]); const feedContainer = createElement("div", { "class": "main-contain" }, [ feedWrap, extraWrap ]); return feedContainer; }