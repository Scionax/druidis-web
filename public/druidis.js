class Account { static id = 0; static initialize() { Account.updateLoginId(); } static runAccountPage() { const page = Nav.urlSeg[1]; if (!page) { return; } if (page === "logout") { Account.logOut(); } } static updateLoginId() { Account.id = 0; const loginCookie = Account.getLoginCookie(); if (!loginCookie) { return false; } const s = loginCookie.split("."); Account.id = Number(s[0]) || 0; return true; } static getLoginCookie() { const cookies = document.cookie.split(";"); for(let i = 0; i < cookies.length; i++){ const c = cookies[i].trim().split('='); if (c[0] !== "login") { continue; } return c[1]; } } static logIn() { if (Config.local) { console.log(`Logged in with ID #${Account.id}.`); } Nav.updateURL(true, Config.url_web, "Druidis"); Nav.runPageUpdate(); } static logOut() { console.log("Logging Out..."); document.cookie = `login=deleted; expires=Thu, 01 Jan 1970 00:00:01 GM; Secure; path=/; domain=${location.host};`; } static async submitLogin(elLogin) { if (elLogin.value !== "Log In") { return; } const data = { "user": document.getElementById("user").value, "pass": document.getElementById("pass").value }; Alerts.error(!data.user, "Please provide a username.", true); Alerts.error(!data.pass, "Please provide a password."); if (Alerts.hasErrors()) { Alerts.displayAlerts(); return; } elLogin.value = "Logging In..."; const json = await API.callAPI("/user/login", data); elLogin.value = "Log In"; Alerts.error(!json, "Error: Server response was invalid. May need to contact the webmaster.", true); if (json.error) { Alerts.error(true, json.error); Alerts.displayAlerts(); return; } if (Account.updateLoginId()) { Account.logIn(); } } static async submitSignIn(elSignUp) { if (elSignUp.value !== "Sign Up") { return; } const data = { "user": document.getElementById("user").value, "email": document.getElementById("email").value, "pass": document.getElementById("pass").value, "tos": document.getElementById("tos").checked ? true : false, "privacy": document.getElementById("privacy").checked ? true : false }; Alerts.error(!data.user, "Please provide a username.", true); Alerts.error(data.user.length < 6, "Username must be between 6 and 16 characters."); Alerts.error(!data.email || !data.email.match(/^\S+@\S+\.\S+$/), "Must provide a valid email."); Alerts.error(!data.pass || data.pass.length < 8, "Password must be at least eight characters."); Alerts.error(!data.tos, "Must agree to the Terms of Service."); Alerts.error(!data.privacy, "Must agree to the Privacy Policy."); if (Alerts.hasErrors()) { Alerts.displayAlerts(); return; } elSignUp.value = "Submitting..."; const json = await API.callAPI("/user/sign-up", data); Alerts.error(!json, "Error: Server response was invalid. May need to contact the webmaster.", true); console.log(json); if (Alerts.hasAlerts()) { Alerts.displayAlerts(); } } } class Alerts { static info; static errors; static hasAlerts() { return Alerts.errors.length > 0 || Alerts.info.length > 0 ? true : false; } static hasErrors() { return Alerts.errors.length === 0 ? false : true; } static purgeAlerts() { Alerts.errors = []; Alerts.info = []; } static error(assert, message, purge = false) { if (purge) { Alerts.purgeAlerts(); } if (assert) { Alerts.errors.push(message); } } static displayAlerts() { if (!Alerts.hasAlerts()) { return; } const box = document.getElementById("alertBox"); const isAlertBox = box ? true : false; if (!isAlertBox) { return; } box.innerHTML = ""; for(let i = 0; i < Alerts.info.length; i++){ const alert = Dom.createElement("div", { "class": "alert alert-info" }); alert.innerHTML = Alerts.info[i]; box.appendChild(alert); } for(let i1 = 0; i1 < Alerts.errors.length; i1++){ const alert = Dom.createElement("div", { "class": "alert alert-fail" }); alert.innerHTML = Alerts.errors[i1]; box.appendChild(alert); } } } class API { static async callAPI(path, data = null) { const response = data === null ? await API.callGetAPI(path) : await API.callPostAPI(path, data); return await response.json(); } static async callPostAPI(path, data) { return await fetch(`${Config.url_api}${path}`, { method: 'POST', headers: { 'Content-Type': 'application/json', 'Credentials': 'include' }, body: JSON.stringify(data) }); } static async callGetAPI(path) { return await fetch(`${Config.url_api}${path}`, { headers: { 'Content-Type': 'application/json', 'Credentials': 'include' } }); } } class Config { static url_web; static url_api; static local; static cacheStatic; static cacheDynamic; static initialize() { Config.local = location.hostname.indexOf("local") > -1 ? true : false; Config.url_web = Config.local ? `http://localhost` : `https://druidis.org`; Config.url_api = `${Config.url_web}/api`; Config.cacheStatic = Config.local ? 20 : 3600 * 24 * 3; Config.cacheDynamic = Config.local ? 20 : 60 * 5; } } class Dom { static createElement(element, attribute = false, inner = null) { const el = document.createElement(element); if (typeof attribute === 'object') { for(const attKey in attribute){ el.setAttribute(attKey, attribute[attKey]); } } if (inner !== null) { for(let k = 0; k < inner.length; k++){ if (!inner[k]) { continue; } if (inner[k].tagName) { el.appendChild(inner[k]); } } } return el; } static clearElement(el) { for(let i = el.children.length - 1; i >= 0; i--){ const child = el.children[i]; el.removeChild(child); } } static setElement(el, childEl) { Dom.clearElement(el); if (typeof childEl === "string") { el.innerHTML = childEl; } else { el.appendChild(childEl); } } } class Feed { static lastAutoload = 0; static currentFeed; static schema = { "Entertainment": [ "Shows", "Movies", "People", "Sports", "Gaming", "Virtual Reality", "Tabletop Games", "Music", "Books" ], "News": [ "World News", "Social Issues", "Politics", "Environment", "Business", "Economic", "Legal" ], "Informative": [ "Technology", "Science", "Education", "History" ], "Lifestyle": [ "Fashion", "Food", "Health", "Fitness", "Social Life", "Relationships", "Recipes", "Travel" ], "Fun": [ "Funny", "Ask", "Cute", "Forum Games", "Cosplay" ], "Creative": [ "Crafts", "Artwork", "Design", "Writing" ], "Home": [ "Shows", "Movies", "People", "Sports", "Gaming", "Virtual Reality", "Tabletop Games", "Music", "Books", "World News", "Social Issues", "Environment", "Politics", "Business", "Economic", "Legal", "Technology", "Science", "Education", "History", "Fashion", "Food", "Health", "Fitness", "Social Life", "Relationships", "Recipes", "Travel", "Funny", "Cute", "Ask", "Cosplay", "Forum Games", "Crafts", "Artwork", "Design", "Writing" ] }; static async fetchFeedPosts(feed, tag = "", pos = 0) { const query = tag && pos ? `?tag=${tag}&p=${pos}` : ''; const response = await Feed.fetchPosts(`feed/${feed}${query}`); return await response.json(); } static async fetchPosts(call) { console.log("--- Fetching Results ---"); console.log(`${Config.url_api}/${call}`); return await fetch(`${Config.url_api}/${call}`, { headers: { 'Content-Type': 'application/json', 'Credentials': 'include' } }); } static getCachedPosts(feed) { const cachedPosts = window.localStorage.getItem(`posts:${feed}`); if (cachedPosts) { try { return JSON.parse(cachedPosts); } catch { return { }; } } return { }; } static cachePosts(cachedPosts, feed, postResponse) { const rawPosts = postResponse ? postResponse : []; if (!Array.isArray(rawPosts)) { return cachedPosts; } for(let i = 0; i < rawPosts.length; i++){ const rawPost = rawPosts[i]; const id = Number(rawPost.id || 0); if (!id) { continue; } if (!cachedPosts[id]) { cachedPosts[id] = rawPost; window.localStorage.setItem(`posts:${feed}`, JSON.stringify(cachedPosts)); } } } static async load() { if (!Feed.currentFeed) { return; } const cachedPosts = Feed.getCachedPosts(Feed.currentFeed); await Feed.loadMore(cachedPosts); Feed.displayPosts(Object.entries(cachedPosts)); } static async loadMore(cachedPosts) { const feed = Feed.currentFeed; const meta = (window.localStorage.getItem(`feedMeta:${feed}`) || ":").split(":"); const tag = meta[0]; const pos = Number(meta[1]) || 0; const willFetch = tag && pos === -1 ? false : true; if (!willFetch) { return; } try { const resp = await Feed.fetchFeedPosts(feed, tag, pos + 1); if (tag !== resp.tag) { MainSection.clearAll(); window.localStorage.setItem(`posts:${feed}`, `{}`); } Feed.displayPosts(Object.entries(resp.posts)); Feed.cachePosts(cachedPosts, feed, resp.posts); const p = Number(resp.start) > 0 && Number(resp.end) <= Number(resp.start) ? "-1" : resp.end; window.localStorage.setItem(`feedMeta:${feed}`, `${resp.tag}:${p}`); } catch { console.error(`Error with response in feed: ${feed}`); } } static allowAutoLoad() { if (Nav.mainHeight() < 1500) { return false; } if (Nav.scrollDist() > 500) { return false; } if (Date.now() - Feed.lastAutoload < 2500) { return false; } Feed.lastAutoload = Date.now(); return true; } static displayPosts(pData) { for (const [_key, post] of pData){ if (!post.id) { continue; } const postElement = buildPost(post); MainSection.append(postElement); } } static autoLoad() { if (!Feed.allowAutoLoad()) { return; } const cachedPosts = Feed.getCachedPosts(Feed.currentFeed); Feed.loadMore(cachedPosts); } static initialize() { const base = Nav.urlSeg[0]; if (base === "") { Feed.currentFeed = "Home"; } else if (base === "feed") { Feed.currentFeed = Nav.urlSeg.length > 1 ? decodeURI(Nav.urlSeg[1]) : "Home"; } if (!Feed.schema[Feed.currentFeed]) { Feed.currentFeed = ""; } Feed.load(); window.addEventListener("scroll", Feed.autoLoad); } } class Forum { static schema = { "Business": "News", "Economic": "News", "Environment": "News", "Legal": "News", "Politics": "News", "Social Issues": "News", "World News": "News", "Education": "Informative", "History": "Informative", "Science": "Informative", "Technology": "Informative", "Books": "Entertainment", "Gaming": "Entertainment", "Movies": "Entertainment", "Music": "Entertainment", "People": "Entertainment", "Shows": "Entertainment", "Sports": "Entertainment", "Tabletop Games": "Entertainment", "Virtual Reality": "Entertainment", "Fashion": "Lifestyle", "Fitness": "Lifestyle", "Food": "Lifestyle", "Health": "Lifestyle", "Recipes": "Lifestyle", "Relationships": "Lifestyle", "Social Life": "Lifestyle", "Travel": "Lifestyle", "Ask": "Fun", "Cosplay": "Fun", "Cute": "Fun", "Forum Games": "Fun", "Funny": "Fun", "Artwork": "Creative", "Crafts": "Creative", "Design": "Creative", "Writing": "Creative" }; static async fetchForumPosts(forum, idHigh = -1, idLow = -1, scanType = 1) { let query; if (scanType === 1) { query = `?s=asc`; if (idHigh > -1) { query += `&h=${idHigh}`; } } else if (scanType === -1) { query = `?s=desc`; if (idLow > -1) { query += `&l=${idLow}`; } } else { query = idHigh > -1 ? `?h=${idHigh}` : ""; } const response = await Feed.fetchPosts(`forum/${forum}${query}`); return await response.json(); } static getIdRangeOfCachedPosts(cachedPosts) { let high = -1; let low = Infinity; for (const [key, post] of Object.entries(cachedPosts)){ if (!post.id) { continue; } const num = Number(key); if (num > high) { high = num; } if (num < low) { low = num; } } return { idHigh: high, idLow: low }; } static async load() { const forum = Feed.currentFeed; if (!forum) { return; } let willFetch = false; let scanType = 0; const cachedPosts = Feed.getCachedPosts(forum); const lastPull = Number(window.localStorage.getItem(`lastPull:${forum}`)) || 0; const { idHigh , idLow } = Forum.getIdRangeOfCachedPosts(cachedPosts); if (idHigh === -1) { willFetch = true; } if (willFetch === false && Nav.loadDate - lastPull > Config.cacheDynamic) { willFetch = true; scanType = 1; console.log(`Haven't pulled in at least ten minutes. Forcing fetch.`); if (lastPull < Nav.loadDate - 60 * Config.cacheDynamic) { scanType = 0; console.log(`Clearing out stale forum data from ${forum}.`); window.localStorage.removeItem(`posts:${forum}`); } } if (willFetch) { try { const postResponse = await Forum.fetchForumPosts(forum, idHigh, idLow, scanType); Feed.cachePosts(cachedPosts, forum, postResponse); window.localStorage.setItem(`lastPull:${forum}`, `${Nav.loadDate}`); } catch { console.error(`Error with response in forum: ${forum}`); } } Feed.displayPosts(Object.entries(cachedPosts).reverse()); } static async autoLoad() { if (!Feed.allowAutoLoad()) { return; } const forum = Feed.currentFeed; const cachedPosts = Feed.getCachedPosts(forum); const { idHigh , idLow } = Forum.getIdRangeOfCachedPosts(cachedPosts); if (idLow <= 1) { return; } const postResponse = await Forum.fetchForumPosts(forum, idHigh, idLow, -1); Feed.cachePosts(cachedPosts, forum, postResponse); window.localStorage.setItem(`lastPull:${forum}`, `${Nav.loadDate}`); Feed.displayPosts(Object.entries(postResponse)); } static initialize() { if (Nav.urlSeg[0] === "forum" && Nav.urlSeg.length > 1) { Feed.currentFeed = decodeURI(Nav.urlSeg[1]); } else { Feed.currentFeed = ""; } if (!Forum.schema[Feed.currentFeed]) { Feed.currentFeed = ""; } Forum.load(); window.addEventListener("scroll", Forum.autoLoad); } } class MainSection { static get() { return document.getElementById("main-section"); } static async loadInnerHtml() { const lastInner = Number(localStorage.getItem(`lastCache:${Nav.urlPathname}`)) || 0; if (Nav.loadDate - lastInner > Config.cacheStatic) { console.log(`Clearing stale data on ${Nav.urlPathname}`); localStorage.removeItem(`html:${Nav.urlPathname}`); localStorage.setItem(`lastCache:${Nav.urlPathname}`, Nav.loadDate.toString()); } else { const innerHtml = localStorage.getItem(`html:${Nav.urlPathname}`); if (innerHtml) { Dom.setElement(MainSection.get(), innerHtml); return; } } const response = await MainSection.fetchInner(Nav.urlPathname); const contents = await response.text(); Dom.setElement(MainSection.get(), contents); MainSection.saveLocalHtml(); } static saveLocalHtml() { const contents = MainSection.exportInnerHTML(); localStorage.setItem(`html:${Nav.urlPathname}`, contents); } static clearAll() { Dom.clearElement(MainSection.get()); } static append(el) { const mainSection = MainSection.get(); if (mainSection !== null) { mainSection.appendChild(el); } } static clearBlock(blockId) { const mainSection = MainSection.get(); for(let i = mainSection.children.length - 1; i >= 0; i--){ const child = mainSection.children[i]; if (child.classList.contains(blockId)) { mainSection.removeChild(child); } } } static exportInnerHTML() { const mainSection = MainSection.get(); return mainSection.innerHTML; } static async fetchInner(path) { return await fetch(`${Config.url_web}/page${path}`, { headers: { 'Content-Type': 'text/html', 'Credentials': 'include' } }); } } class Nav { static url; static urlPathname; static urlSeg; static innerLoad; static loadDate; static pageLoad = { "/user/logout": ()=>{ Account.logOut(); }, "/post": ()=>{ Script.load("PostPage"); } }; static updateURL(innerLoad, newUrl = "", newTitle = "", movedBack = false) { if (newUrl && !movedBack) { history.pushState(null, newTitle, newUrl); } Nav.innerLoad = innerLoad; Nav.loadDate = Math.floor(Date.now() / 1000); Nav.url = location.href; Nav.urlPathname = location.pathname; Nav.urlSeg = location.pathname.split("/"); if (Nav.urlSeg.length > 0) { Nav.urlSeg.shift(); } } static runPageUpdate() { const base = Nav.urlSeg[0]; if (Nav.innerLoad) { MainSection.clearAll(); } if (base === "") { Feed.initialize(); } else if (base === "forum" && Nav.urlSeg[1]) { Forum.initialize(); } else if (base === "feed") { Feed.initialize(); } else if (base === "admin") { Script.load("AdminPage"); } else if (Nav.innerLoad) { MainSection.loadInnerHtml().then(()=>{ if (Nav.pageLoad[Nav.urlPathname]) { Nav.pageLoad[Nav.urlPathname](); } }); } else { if (Nav.pageLoad[Nav.urlPathname]) { Nav.pageLoad[Nav.urlPathname](); } } } static mainHeight() { return MainSection.get().scrollHeight; } static scrollDist() { return Nav.mainHeight() - window.scrollY - window.innerHeight; } } class OpenGraph { static postData; static async fetchData(url) { const response = fetch(`${Config.url_api}/data/html?url=${encodeURIComponent(url)}`, { headers: { 'Content-Type': 'application/json', 'Credentials': 'include' } }); const data = await (await response).json(); let pass = false; const metaData = new OpenGraphMetaData(); try { const dom = new DOMParser().parseFromString(data, "text/html"); await OpenGraph.parseDocument(dom, metaData); pass = true; } catch (error) { pass = false; console.error(error.message); } if (pass) { OpenGraph.postData = { url: metaData.url, title: metaData.title, content: metaData.content, origImg: metaData.image.url, w: metaData.image.width, h: metaData.image.height }; const feedElement = buildPost(OpenGraph.postData); MainSection.clearBlock("main-contain"); MainSection.append(feedElement); } } static async parseDocument(doc, metaData) { let scanForType = ""; const metaElements = doc.getElementsByTagName("meta"); for(let i = 0; i < metaElements.length; i++){ const metaVals = metaElements[i]; const metaName = metaVals.getAttribute("property") ? metaVals.getAttribute("property") : metaVals.name; if (!metaName || !metaVals.content) { continue; } const metaContent = metaVals.content; const s = metaName.split(":"); const name = s[1]; const nameProp = s[2]; if (name == "url") { metaData.url = metaContent; scanForType = ""; } if (name == "title") { metaData.title = metaContent; scanForType = ""; } if (name == "description") { metaData.content = metaContent.substring(0, 256); scanForType = ""; } if (name == "determiner") { metaData.determiner = metaContent; scanForType = ""; } if (name == "locale") { metaData.locale = metaContent; scanForType = ""; } if (name == "site_name") { metaData.site_name = metaContent; scanForType = ""; } if ((name == "image" || name == "video") && !metaData[name].locked) { if (nameProp) { if (nameProp == "url") { metaData[name].setUrl(metaContent); } else if (nameProp == "secure_url" && !metaData[name].url) { metaData[name].setUrl(metaContent); } else if (nameProp == "type") { metaData[name].setMimeType(metaContent); } else if (nameProp == "width") { metaData[name].setWidth(Number(metaContent)); } else if (nameProp == "height") { metaData[name].setHeight(Number(metaContent)); } else if (nameProp == "alt") { metaData[name].setAlt(metaContent); } } else { if (scanForType == name) { metaData[name].lock(); } else { metaData[name].setUrl(metaContent); } } scanForType = name; } } if (metaData.image && metaData.image.url) { await metaData.getImageSize(metaData.image.url); } } } class OpenGraphMetaData { url; title; image; video; content; comment; determiner; locale; site_name; type; mediaClass; constructor(){ this.url = ""; this.title = ""; this.image = new OpenGraphMetaVisual(); this.video = new OpenGraphMetaVisual(); this.content = ""; this.comment = ""; this.determiner = ""; this.locale = ""; this.site_name = ""; this.type = ""; this.mediaClass = ""; } async getImageSize(url) { const img = new Image(); img.src = url; await img.decode(); this.image.width = img.width; this.image.height = img.height; } } class OpenGraphMetaVisual { url; mimeType; width; height; alt; locked; constructor(){ this.url = ""; this.mimeType = ""; this.width = 0; this.height = 0; this.alt = ""; this.locked = false; } setUrl(url) { this.url = url; } setMimeType(mimeType) { this.mimeType = mimeType; } setWidth(width) { this.width = width; } setHeight(height) { this.height = height; } setAlt(alt) { this.alt = alt; } lock() { this.locked = true; } isSmall() { if (this.width && this.width < 300) { return true; } if (this.height && this.height < 200) { return true; } return false; } } function buildPost(post, isFeed = false) { const feedIconImg = Dom.createElement("amp-img", { "width": "48", "height": "48", "src": `/public/images/logo/logo-48.png` }); const feedIcon = Dom.createElement("div", { "class": "tray-icon" }, [ feedIconImg ]); const feedHeaderTitle = Dom.createElement("div", { "class": "h3" }); feedHeaderTitle.innerHTML = "Author Name or Title"; const feedHeaderSubNote = Dom.createElement("div", { "class": "note2" }); try { const urlInfo = new URL(post.url); feedHeaderSubNote.innerHTML = `Source: ${urlInfo.hostname}`; } catch { } const feedHeader = Dom.createElement("div", { "class": "tray-mid" }, [ feedHeaderTitle, feedHeaderSubNote ]); const feedMenuInner = Dom.createElement("div", { "class": "tray-menu-inner" }); feedMenuInner.innerHTML = "•••"; const feedMenu = Dom.createElement("div", { "class": "tray-menu" }, [ feedMenuInner ]); const feedTop = Dom.createElement("div", { "class": "tray" }, [ feedIcon, feedHeader, feedMenu ]); const feedWrapChildren = [ feedTop ]; if (post.img || post.origImg) { let feedImageImg; if (post.origImg) { feedImageImg = Dom.createElement("amp-img", { "layout": "responsive", "max-width": `${post.w}`, "width": `${post.w}`, "height": `${post.h}`, "src": post.origImg }); } else if (post.id) { const imgPage = Math.ceil(post.id / 1000); const imgPath = `${post.forum}/${imgPage}/${post.img}`; feedImageImg = Dom.createElement("amp-img", { "layout": "responsive", "max-width": `${post.w}`, "width": `${post.w}`, "height": `${post.h}`, "src": `https://us-east-1.linodeobjects.com/druidis-cdn/${imgPath}` }); } if (feedImageImg) { const feedImageInner = Dom.createElement("div", { "class": "feed-image-inner" }, [ feedImageImg ]); const feedImage = Dom.createElement("div", { "class": "feed-image" }, [ feedImageInner ]); const feedHov = Dom.createElement("a", { "class": "feed-hov", "href": post.url }, [ feedImage ]); feedWrapChildren.push(feedHov); } } const feedWrap = Dom.createElement("div", { "class": "half-wrap" }, feedWrapChildren); const extraTitle = Dom.createElement("h2"); extraTitle.innerHTML = post.title; const extraContent = Dom.createElement("p"); extraContent.innerHTML = post.content; const extraBody = Dom.createElement("div", { "class": "extra-body" }, [ extraTitle, extraContent ]); const extraWrapLink = Dom.createElement("a", { "class": "feed-hov", href: post.url }, [ extraBody ]); const linkList = Dom.createElement("div", { "class": "linkList" }); if (post.forum && !isFeed) { const feedName = Forum.schema[post.forum]; const crumb = Dom.createElement("a", { "class": "link", "href": `/feed/${feedName}` }); crumb.innerHTML = feedName; linkList.appendChild(crumb); } else if (post.forum && isFeed) { const crumb = Dom.createElement("a", { "class": "link", "href": `/forum/${post.forum}` }); crumb.innerHTML = post.forum; linkList.appendChild(crumb); } const extraFoot = Dom.createElement("div", { "class": "extra-foot" }, [ linkList ]); const extraWrap = Dom.createElement("div", { "class": "extra-wrap" }, [ extraWrapLink, extraFoot ]); const feedContainer = Dom.createElement("div", { "class": "main-contain" }, [ feedWrap, extraWrap ]); return feedContainer; } class Script { static registry = { }; static load(scriptName, defer = true) { const scriptFound = document.getElementById(`script-${scriptName}`); if (scriptFound) { Script.registry[scriptName](); return; } const script = document.createElement('script'); script.id = `script-${scriptName}`; script.defer = defer; script.src = `${Config.url_web}/public/scripts/${scriptName}.js`; script.addEventListener("load", ()=>{ Script.registry[scriptName](); }); document.head.appendChild(script); } static register(scriptName, initMethod) { Script.registry[scriptName] = initMethod; } } document.addEventListener("click", (e)=>{ if (!e.target) { return; } if (!(e.target instanceof Element)) { return; } const inputOrigin = e.target.closest("input"); if (inputOrigin && inputOrigin.type === "submit") { return runSubmitPress(inputOrigin); } const origin = e.target.closest("a"); if (!origin || !origin.href) { return; } e.preventDefault(); Nav.updateURL(true, origin.href, document.title); Nav.runPageUpdate(); }); window.addEventListener("popstate", (e)=>{ e.preventDefault(); Nav.updateURL(true, document.location.href, document.title, true); Nav.runPageUpdate(); }); window.addEventListener("submit", (e)=>{ e.preventDefault(); const submit = MainSection.get()?.querySelector(`input[type="submit"]`); if (submit instanceof HTMLInputElement) { submit.click(); } }); function runSubmitPress(inputOrigin) { if (Config.local) { console.log(`Global click on ${inputOrigin.id}.`); } switch(inputOrigin.id){ case "loginSubmit": return Account.submitLogin(inputOrigin); case "signUpSubmit": return Account.submitSignIn(inputOrigin); } } Config.initialize(); Alerts.purgeAlerts(); Nav.updateURL(false); Nav.runPageUpdate(); Account.initialize();